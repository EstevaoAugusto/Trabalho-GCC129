import google.generativeai as genai 
import os
from typing import List, Optional, Tuple
from .. import schemas, models

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("Erro Cr√≠tico: GEMINI_API_KEY n√£o est√° configurada no ambiente.")
    model = None 
else:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        generation_config = {
          "temperature": 0.7,
          "top_p": 1,
          "top_k": 1,
          "max_output_tokens": 2048,
        }

        model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=generation_config,
        )
        print("Cliente Gemini inicializado com sucesso.")
    except Exception as e:
        print(f"Erro ao inicializar o cliente Gemini: {e}")
        model = None 


def format_history(history: List[models.Order]) -> str:
    if not history:
        return "Este √© um cliente novo, sem hist√≥rico de pedidos.", []

    product_frequency = {}
    for order in history:
        for item in order.itens:
            product_name = item.produto.nome
            product_frequency[product_name] = product_frequency.get(product_name, 0) + 1

    if not product_frequency:
         return "Este √© um cliente novo, sem hist√≥rico de pedidos.", []

    sorted_history = sorted(product_frequency.items(), key=lambda x: x[1], reverse=True)

    formatted = "Itens mais pedidos por este cliente (em ordem de frequ√™ncia):\n"
    frequent_items_list = []
    for product_name, count in sorted_history:
        formatted += f"- {product_name} (pedido {count} vezes)\n"
        frequent_items_list.append(product_name)

    return formatted, frequent_items_list

def format_promotions(promo_products: List[models.Product]) -> str:
    if not promo_products:
        return "N√£o h√° promo√ß√µes ativas no momento."

    formatted = "Promo√ß√µes ativas:\n"
    for product in promo_products:
        formatted += f"- Promo√ß√£o: {product.nome} por R$ {product.preco_promocional:.2f}!\n" 
    return formatted

def format_current_order(items: List[schemas.OrderItemBase], products_dict: dict) -> str:
    if not items:
        return "O cliente ainda n√£o adicionou itens.", []

    formatted = "Itens no pedido atual (entendido at√© agora):\n"
    current_items_list = []
    for item in items:
        product_name = products_dict.get(item.produto_id, "Produto Desconhecido")
        formatted += f"- {item.quantidade}x {product_name}\n"
        current_items_list.append(product_name)

    return formatted, current_items_list

async def get_gemini_recommendation(
    intent: str,
    parsed_items: List[schemas.OrderItemBase],
    history: List[models.Order],
    promotions: List[models.Product],
    all_products: List[models.Product],
    out_of_stock_items: Optional[List[str]] = None,
    failed_guesses : Optional[List[str]] = None
) -> str:
    """
    Chama a IA 2 (Gemini) para gerar um upsell inteligente.
    Agora usa o modelo global inicializado corretamente.
    """

    if model is None:
         print("Erro: Tentando usar Gemini, mas o modelo n√£o foi inicializado.")
         # Retorna mensagem de erro mais direta para clarificar
         if intent.startswith("clarify"):
             return "Opa, desculpa, t√¥ com uma dificuldade aqui pra processar. Pode repetir?"
         else: # Para confirm/suggest, um fallback mais simples
              return "Entendido! Algo mais?"

    history_context, frequent_items = format_history(history)
    promo_context = format_promotions(promotions)

    products_dict = {p.id: p.nome for p in all_products} 
    current_order_context, current_items_names = format_current_order(parsed_items, products_dict)

    # Constr√≥i mensagens sobre itens problem√°ticos
    out_of_stock_msg = ""
    if out_of_stock_items:
        items_str = " e ".join(out_of_stock_items)
        out_of_stock_msg = f"Ah, s√≥ pra avisar: o {items_str} acabou aqui no estoque, mas j√° j√° chega mais! üòÖ"

    failed_guesses_msg = ""
    if failed_guesses:
        guesses_str = " e ".join(failed_guesses)
        failed_guesses_msg = f"Eu *acho* que voc√™ falou algo sobre '{guesses_str}', mas n√£o tenho certeza se temos isso no card√°pio ou se entendi direito."

    # Define a miss√£o principal baseada na INTENT
    mission = "" 

    # 1. Casos de Esclarecimento (IA 1 falhou ou Estoque)
    if intent == "clarify_stock":
        items_str = ", ".join(out_of_stock_items) if out_of_stock_items else "o item que voc√™ pediu"
        mission = f"""
        **Sua Miss√£o:** O cliente pediu '{items_str}', mas esse(s) item(ns) est√°(√£o) fora de estoque.
        1. Pe√ßa desculpas de forma natural (ex: "Putz...", "Opa, m√° not√≠cia...").
        2. Informe que o item acabou e que ser√° reposto em breve.
        3. Pergunte se ele gostaria de escolher outra coisa do card√°pio enquanto isso.
        *Exemplo:* "Putz, o {items_str} acabou de sair... üòï Mas relaxa que logo tem mais! Enquanto isso, quer escolher outra coisa do nosso card√°pio?"
        """
        # Zera contextos irrelevantes
        history_context = ""
        promo_context = ""
        current_order_context = ""

    elif intent == "clarify_product":
        guesses_str = ", ".join(failed_guesses) if failed_guesses else "algo que mencionei"
        mission = f"""
        **Sua Miss√£o:** N√£o consegui identificar '{guesses_str}' como um item do nosso card√°pio.
        1. Pe√ßa desculpas por n√£o ter entendido bem.
        2. Mencione o que voc√™ *acha* que ele disse (guesses_str).
        3. Pe√ßa para ele confirmar se √© isso mesmo e como se chama no card√°pio, ou para pedir outra coisa.
        *Exemplo:* "Opa, desculpa, n√£o peguei direito... voc√™ mencionou '{guesses_str}'? N√£o achei aqui no card√°pio com esse nome. Pode me dizer de novo ou escolher outro item?"
        """
        history_context = ""
        promo_context = ""
        current_order_context = ""

    elif intent == "clarify_general":
         mission = """
         **Sua Miss√£o:** N√£o entendi nada do que o cliente pediu ou ele s√≥ cumprimentou.
         1. Pe√ßa desculpas por n√£o ter entendido (se n√£o foi s√≥ cumprimento).
         2. Pe√ßa para ele fazer o pedido usando os itens do card√°pio.
         *Exemplo (n√£o entendeu):* "Eita, desculpa, minha IA aqui deu uma viajada... n√£o entendi seu pedido. Pode falar de novo, por favor, usando os nomes do card√°pio?"
         *Exemplo (cumprimento):* "Opa, bom dia! O que manda?"
         """
         history_context = ""
         promo_context = ""
         current_order_context = ""

    # 2. Casos de Confirma√ß√£o ou Sugest√£o (IA 1 funcionou)
    else: # intent == "confirm" or intent == "suggest"
        missing_favorites = []
        for item_name in frequent_items:
            if item_name not in current_items_names:
                 # Verifica se o favorito faltando est√° em estoque antes de considerar
                 fav_product = next((p for p in all_products if p.nome == item_name), None)
                 if fav_product and fav_product.quantidade_estoque > 0:
                      missing_favorites.append(item_name)

        # Base da resposta: Confirma√ß√£o + Aviso de estoque (se houver)
        confirmation_base = ""
        if parsed_items: # S√≥ confirma se tiver itens entendidos
             items_confirm_str = " e ".join([f"{item.quantidade}x {products_dict.get(item.produto_id)}" for item in parsed_items])
             confirmation_base = f"Beleza! Anotado aqui: {items_confirm_str}. {out_of_stock_msg}"
        elif out_of_stock_msg: # Se n√£o entendeu nada em estoque, mas tem aviso de fora de estoque
             confirmation_base = out_of_stock_msg
        else: # N√£o entendeu nada em estoque e n√£o pediu nada fora de estoque (deve cair em clarify_general, mas por seguran√ßa)
             confirmation_base = "Hmm, acho que n√£o peguei seu pedido."
             intent = "clarify_general" # For√ßa clarifica√ß√£o

        # L√≥gica de Sugest√£o (s√≥ se intent="suggest" E achou favorito)
        if intent == "suggest" and missing_favorites:
             item_para_sugerir = missing_favorites[0]
             mission = f"""
             **Sua Miss√£o:** O cliente j√° tem itens no pedido.
             1. Confirme o que j√° foi entendido ({confirmation_base}).
             2. Note que ele esqueceu o item favorito '{item_para_sugerir}' (que est√° em estoque).
             3. Sugira adicionar esse item espec√≠fico.
             *Exemplo:* "{confirmation_base} Notei que hoje faltou o seu cl√°ssico '{item_para_sugerir}', n√©? Quer adicionar um a√≠?"
             """
        # L√≥gica de Confirma√ß√£o (com tentativa de promo ou s√≥ "algo mais?")
        else: # intent == "confirm" (ou suggest sem favorito aplic√°vel)
             # Tenta achar uma promo aplic√°vel que N√ÉO esteja j√° no pedido
             applicable_promo = None
             for promo_prod in promotions:
                 if promo_prod.nome not in current_items_names:
                      applicable_promo = promo_prod
                      break # Pega a primeira que achar

             if applicable_promo:
                 mission = f"""
                 **Sua Miss√£o:** O cliente j√° tem itens no pedido.
                 1. Confirme o que j√° foi entendido ({confirmation_base}).
                 2. Ofere√ßa a promo√ß√£o do '{applicable_promo.nome}' por R${applicable_promo.preco_promocional:.2f}.
                 *Exemplo:* "{confirmation_base} E a√≠, pra acompanhar, t√° rolando promo do {applicable_promo.nome} por s√≥ R${applicable_promo.preco_promocional:.2f}, topa?"
                 """
             else: # Sem promo aplic√°vel
                 mission = f"""
                 **Sua Miss√£o:** O cliente j√° tem itens no pedido e n√£o h√° sugest√£o clara (nem favorito, nem promo nova).
                 1. Confirme o que j√° foi entendido ({confirmation_base}).
                 2. Pergunte de forma simples se ele quer mais alguma coisa.
                 *Exemplo:* "{confirmation_base} Vai querer mais alguma coisa?"
                 """

    prompt = f"""
    CONTEXTO: Voc√™ √© um chatbot para a cafeteria CoffeeNet. Seu objetivo √© anotar pedidos de forma eficiente e amig√°vel, agindo como um atendente universit√°rio gente boa (sem ser for√ßado). Use g√≠rias leves se parecer natural (ex: "beleza", "show", "e a√≠").

    REGRAS IMPORTANTES:
    - Responda SEMPRE em portugu√™s brasileiro.
    - Foque em anotar o pedido ou esclarecer d√∫vidas sobre ele.
    - Seja direto ao ponto.
    - Se for confirmar itens, liste-os claramente.
    - Se for pedir esclarecimento, diga o que n√£o entendeu.
    - Se for sugerir upsell, fa√ßa apenas UMA sugest√£o clara.

    INFORMA√á√ïES DISPON√çVEIS (Use se relevante para a miss√£o):
    - Hist√≥rico do Cliente: {history_context if history_context else 'Nenhum ou irrelevante para esta resposta.'}
    - Promo√ß√µes Ativas (em estoque): {promo_context if promo_context else 'Nenhuma ou irrelevante para esta resposta.'}
    - Pedido Atual (entendido at√© agora): {current_order_context if current_order_context else 'Nenhum ou irrelevante para esta resposta.'}

    -------------------
    MISS√ÉO PARA ESTA RESPOSTA:
    {mission}
    -------------------

    EXEMPLOS DE RESPOSTAS ESPERADAS:
    - (Miss√£o: clarify_stock) -> "Putz, o Suco de Laranja acabou de sair... üòï Mas relaxa que logo tem mais! Enquanto isso, quer escolher outra coisa do nosso card√°pio?"
    - (Miss√£o: clarify_product, guess='pizza') -> "Opa, desculpa, n√£o peguei direito... voc√™ mencionou 'pizza'? N√£o achei aqui no card√°pio com esse nome. Pode me dizer de novo ou escolher outro item?"
    - (Miss√£o: clarify_general) -> "Eita, desculpa, minha IA aqui deu uma viajada... n√£o entendi seu pedido. Pode falar de novo, por favor, usando os nomes do card√°pio?"
    - (Miss√£o: suggest, pedido='1x Caf√© Espresso', fav_faltando='P√£o de Queijo') -> "Beleza! Anotado aqui: 1x Caf√© Espresso. Notei que hoje faltou o seu cl√°ssico 'P√£o de Queijo', n√©? Quer adicionar um a√≠?"
    - (Miss√£o: confirm, pedido='1x Cappuccino', promo_aplicavel='Bolo de Fub√°') -> "Show! Anotado: 1x Cappuccino. E a√≠, pra acompanhar, t√° rolando promo do Bolo de Fub√° por s√≥ R$7.00, topa?"
    - (Miss√£o: confirm, pedido='1x Bolo de Fub√°', sem promo/fav) -> "Massa! Anotado: 1x Bolo de Fub√°. Vai querer mais alguma coisa?"

    SUA RESPOSTA (APENAS a fala do atendente, curta e direta):
    """

    try:
        response = await model.generate_content_async(prompt)
        text_response = response.text.strip()
        if text_response.lower().startswith("resposta:"):
             text_response = text_response[len("resposta:"):].strip()
        elif text_response.lower().startswith("aqui est√° a resposta:") or text_response.lower().startswith("ok, aqui est√° a resposta:"):
             parts = text_response.split(':', 1)
             if len(parts) > 1:
                  text_response = parts[1].strip()

        return text_response

    except Exception as e:
        print(f"Erro ao chamar API do Gemini: {e}")
        if intent.startswith("clarify"):
            return "Desculpe, n√£o entendi muito bem. Poderia repetir ou escolher um item do card√°pio?"
        else:
             return "Entendido! Algo mais?" 